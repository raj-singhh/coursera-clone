import { Component, DestroyRef, EventEmitter, OnDestroy, Output, inject } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { LoginRequest } from '../auth.service';
import { Router } from '@angular/router';
import { Store } from '@ngrx/store';
import { AppState } from '../store/app.state';
import * as AuthActions from '../store/auth/auth.actions';
import * as AuthSelectors from '../store/auth/auth.selectors';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';omponent, DestroyRef, EventEmitter, OnDestroy, OnInit, Output, inject } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { LoginRequest } from '../auth.service';
import { Router } from '@angular/router';
import { Store } from '@ngrx/store';
import { AppState } from '../store/app.state';
import * as AuthActions from '../store/auth/auth.actions';
import * as AuthSelectors from '../store/auth/auth.selectors';
import { Subject, takeUntil } from 'rxjs';

@Component({
  selector: 'app-login',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './login.component.html',
  styleUrl: './login.component.css'
})
export class LoginComponent implements OnInit, OnDestroy {
  loginRequest: LoginRequest = { username: '', password: '' };
  errorMessage: string | null = null;
  loading: boolean = false;

  @Output() switchToRegister = new EventEmitter<void>();
  @Output() loginSuccess = new EventEmitter<void>();

  private readonly destroyRef = inject(DestroyRef);
  private destroy$ = new Subject<void>();

  constructor(
    private router: Router,
    private store: Store<AppState>
  ) {
    this.destroyRef.onDestroy(() => {
      this.destroy$.next();
      this.destroy$.complete();
    });
  }

  ngOnInit(): void {
    // Handle auth errors
    this.store.select(AuthSelectors.selectAuthError)
      .pipe(takeUntil(this.destroy$))
      .subscribe(error => {
        if (error) {
          this.errorMessage = 'Login failed. Please check your username and password.';
          if (typeof error === 'object' && error && 'message' in error) {
            this.errorMessage = error.message as string;
          }
        } else {
          this.errorMessage = null;
        }
      });

    // Handle loading state
    this.store.select(AuthSelectors.selectAuthLoading)
      .pipe(takeUntil(this.destroy$))
      .subscribe(loading => {
        this.loading = loading as boolean;
      });

    // Handle successful login
    this.store.select(AuthSelectors.selectAuthToken)
      .pipe(takeUntil(this.destroy$))
      .subscribe(token => {
        if (token) {
          this.loginSuccess.emit();
        }
      });
  }

  ngOnDestroy(): void {
    // Cleanup is handled automatically by DestroyRef
  }
  }

  ngOnDestroy(): void {
    this.subscriptions.forEach(sub => sub.unsubscribe());
  }

  onSubmit(): void {
    this.errorMessage = null;
    this.store.dispatch(AuthActions.login({ username: this.loginRequest.username, password: this.loginRequest.password }));
  }

  onSwitchToRegister(): void {
    this.switchToRegister.emit();
  }
}
